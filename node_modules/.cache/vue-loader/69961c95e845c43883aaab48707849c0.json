{"remainingRequest":"C:\\Users\\q.samaya\\Desktop\\MIS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\q.samaya\\Desktop\\MIS\\src\\views\\Createnewagreement.vue?vue&type=template&id=25f6f4a2&","dependencies":[{"path":"C:\\Users\\q.samaya\\Desktop\\MIS\\src\\views\\Createnewagreement.vue","mtime":1595590591797},{"path":"C:\\Users\\q.samaya\\Desktop\\MIS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\q.samaya\\Desktop\\MIS\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\q.samaya\\Desktop\\MIS\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\q.samaya\\Desktop\\MIS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\q.samaya\\Desktop\\MIS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiA8ZGl2IGNsYXNzPSd0YWJkaXYnPgogIDx2LWNhcmQgZmxhdCBjbGFzcz0ndGFiLXNlY3Rpb24nPgogICAgIDx2LWZvcm0gIEBzdWJtaXQ9ImFkZENvbnRyYWN0U3VibWl0Ij4KICAgICAgPHYtY29udGFpbmVyPgogICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0idGV4dC1jZW50ZXIganVzdGlmeS1jZW50ZXIgcHktNiI+CiAgICAgIDxoMSBjbGFzcz0idGl0bGUtbmFtZSI+WUVOxLAgTcOcUUFWxLBMxo88L2gxPgogICAgPC92LWNhcmQtdGl0bGU+CiAgICA8ZGl2IHYtaWY9IiFmb3JtRGF0YS5jb250cmFjdFR5cGVJZCI+CiAgICAgICAKICAgICAgIAogICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlciFpbXBvcnRhbnQ7IGZvbnQtc2l6ZToyMHB4IWltcG9ydGFudCIgY2xhc3M9InRpdGxlLXRhYnMiPk3DvHFhdmlsyZluaW4gdGlwaW5pIHNlw6dpbjwvZGl2PgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4gIDx2LXNlbGVjdCB2LW1vZGVsPSJmb3JtRGF0YS5jb250cmFjdFR5cGVJZCIgOml0ZW1zPSJhbGxjb250cmFjdHR5cGUiIGl0ZW0tdmFsdWU9ImlkIiBpdGVtLXRleHQ9ImRlc2NyaXB0aW9uIiAgIGxhYmVsPSJUaXBpIiBAY2hhbmdlPSJnZXRGb3JtRGF0YSgpIj48L3Ytc2VsZWN0PjwvZGl2PiAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ndGFiLWJ1dHRvbnMnIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlciFpbXBvcnRhbnQ7Ij4gPHYtYnRuIHN0eWxlPSJjb2xvcjogIzIyOTRmMiFpbXBvcnRhbnQ7IiBAY2xpY2s9IiRyb3V0ZXIuZ28oLTEpIiBvdXRsaW5lZD7EsE1UxLBOQSBFVDwvdi1idG4+IDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgCiAgICA8L2Rpdj4KPGRpdiB2LWlmPSJmb3JtRGF0YS5jb250cmFjdFR5cGVJZCI+CiAgICA8di10YWJzCiAgICAgIHYtbW9kZWw9InRhYiIgCiAgICAgIGNlbnRlcmVkCiAgICAgICAKICAgID4gIAogICAgICA8di10YWIgY2xhc3M9J2ZpcnN0LXRhYicgaHJlZj0iI3RhYi0xIj4xPC92LXRhYj4KICAgICAgPHYtdGFiIGhyZWY9IiN0YWItMiI+Mjwvdi10YWI+CiAgICAgIDx2LXRhYiBocmVmPSIjdGFiLTMiPjM8L3YtdGFiPgogICAgICA8di10YWIgaHJlZj0iI3RhYi00Ij40PC92LXRhYj4gCiAgICAgIDx2LXRhYiBocmVmPSIjdGFiLTUiPjU8L3YtdGFiPgogICAgPC92LXRhYnM+IAogICAgPHYtdGFicy1pdGVtcyB2LW1vZGVsPSJ0YWIiPgogICAgICA8di10YWItaXRlbSB2YWx1ZT0idGFiLTEiPiA8di1jYXJkIGZsYXQ+IAogICAgICAgIAogICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS10YWJzIj4gTcO8cWF2aWzJmSA8L2Rpdj4KICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIDp0aXRsZT0iZ2V0Q29udFR5cGVUaXRsZShmb3JtRGF0YS5jb250cmFjdFR5cGVJZCkiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdCAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdjb250cmFjdFR5cGVJZCcpIH0iICB2LW1vZGVsPSJmb3JtRGF0YS5jb250cmFjdFR5cGVJZCIgOml0ZW1zPSJhbGxjb250cmFjdHR5cGUiIGl0ZW0tdmFsdWU9ImlkIiBpdGVtLXRleHQ9ImRlc2NyaXB0aW9uIiB0aXRsZT0iZGVzY3JpcHRpb24iIGxhYmVsPSJUaXBpIiBAY2hhbmdlPSJnZXRGb3JtRGF0YSgpIj48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sICBjb2xzPSIxMiIgc209IjYiIG1kPSI0IiAgdi1pZj0iY2hlY2tGaWVsZCgnY29udHJhY3REYXRlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmb3JtRGF0YS5jb250cmFjdERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlRhcml4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJldmVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ2NvbnRyYWN0RGF0ZScpIH0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJ1bGVzPSJuYW1lUnVsZXMiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1kYXRlLXBpY2tlciAgOmZpcnN0LWRheS1vZi13ZWVrPSIxIiB2LW1vZGVsPSJmb3JtYXRjb250cmFjdERhdGUiIEBpbnB1dD0ibWVudTEgPSBmYWxzZSI+PC92LWRhdGUtcGlja2VyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkKCdjb250cmFjdE51bWJlcicpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgIGxhYmVsPSJOw7ZtcsmZc2kiICA6cnVsZXM9Im5hbWVSdWxlcyIgdi1tb2RlbD0iZm9ybURhdGEuY29udHJhY3ROdW1iZXIiICAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnY29udHJhY3ROdW1iZXInKSB9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSI2IiBtZD0iNCIgIHYtaWY9ImNoZWNrRmllbGQoJ2V4ZWN1dGl2ZU9yZGVyRGF0ZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im1lbnUyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tY29udGVudC1jbGljaz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpudWRnZS1yaWdodD0iNDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iMjkwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybURhdGEuZXhlY3V0aXZlT3JkZXJEYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0ixo9tcmluIHRhcml4aSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kLWljb249ImV2ZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ2V4ZWN1dGl2ZU9yZGVyRGF0ZScpfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cnVsZXM9Im5hbWVSdWxlcyIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRhdGUtcGlja2VyIDpmaXJzdC1kYXktb2Ytd2Vlaz0iMSIgdi1tb2RlbD0iZm9ybWF0ZXhlY3V0aXZlT3JkZXJEYXRlIiBAaW5wdXQ9Im1lbnUyID0gZmFsc2UiPjwvdi1kYXRlLXBpY2tlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICAgdi1pZj0iY2hlY2tGaWVsZCgnZXhlY3V0aXZlT3JkZXJOdW1iZXInKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIHYtbW9kZWw9ImZvcm1EYXRhLmV4ZWN1dGl2ZU9yZGVyTnVtYmVyIiBsYWJlbD0ixo9tcmluIG7Dtm1yyZlzaSIgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ2V4ZWN1dGl2ZU9yZGVyTnVtYmVyJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICAgdi1pZj0iY2hlY2tGaWVsZCgnY29udHJhY3RQbGFjZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgdi1tb2RlbD0iZm9ybURhdGEuY29udHJhY3RQbGFjZSIgbGFiZWw9Ik3DvHFhdmlsyZluaW4gYmHEn2xhbmTEscSfxLEgeWVyIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnY29udHJhY3RQbGFjZScpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLXRhYnMiPiDDlmTJmW5pbMmZbiBtyZlibMmZxJ8gPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgID4KICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjYiICAgdi1pZj0iY2hlY2tGaWVsZCgnY29udHJhY3RMaWFiaWxpdHlJZCcpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdCB2LW1vZGVsPSJmb3JtRGF0YS5jb250cmFjdExpYWJpbGl0eUlkIiA6aXRlbXM9ImFsbGNvbnRyYWN0bGlhYmlsaXR5IiBpdGVtLXZhbHVlPSJpZCIgaXRlbS10ZXh0PSJkZXNjcmlwdGlvbiIgbGFiZWw9IsOWZMmZbcmZIG7DtnbDvCIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnY29udHJhY3RMaWFiaWxpdHlJZCcpfSI+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjYiICAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdkZWJ0JywnaW5pdGlhbFBheW1lbnQnKSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgdi1tb2RlbD0iZm9ybURhdGEuZGVidC5pbml0aWFsUGF5bWVudCIgbGFiZWw9IkJlaCIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnZGVidCcsJ2luaXRpYWxQYXltZW50JykubWFuZGF0b3J5fSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjYiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnZGVidCcsJ3NhbGVQcmljZScpIiAgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgdi1tb2RlbD0ic2FsZVByaWNlIiBsYWJlbD0iU2F0xLHFnyBxaXltyZl0aSIgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ2RlYnQnLCdzYWxlUHJpY2UnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgIG1kPSIxMiIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ2RlYnQnLCdkaXNjb3VudFBlcmNlbnQnKSIgPiAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpby1ncm91cCAgICB2LW1vZGVsPSJzYWxlVHlwZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJhZGlvIHZhbHVlPSIwIiAgbGFiZWw9IkfDvHrJmcWfdCBmYWl6aW7JmSBnw7ZyyZkgZ8O8esmZxZ90IG3JmWJsyZnEn2kgdMmZeWluIG9sdW5zdW4iID48L3YtcmFkaW8+IAogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJhZGlvIHZhbHVlPSIxIiAgIGxhYmVsPSJHw7x6yZnFn3QgbcmZYmzJmcSfaW7JmSBnw7ZyyZkgZ8O8esmZxZ90IGZhaXppICB0yZl5aW4gb2x1bnN1biI+PC92LXJhZGlvPiAKICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJhZGlvLWdyb3VwPiAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNiIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdkZWJ0JywnZGlzY291bnRQZXJjZW50JykiICA+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgICAgOmRpc2FibGVkPSIhc2FsZVR5cGVEaXMiICAgIHYtbW9kZWw9ImRpc2NvdW50UGVyY2VudCIgbGFiZWw9IkfDvHrJmcWfdCBmYWl6aSIgICByZXF1aXJlZCAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnZGVidCcsJ2Rpc2NvdW50UGVyY2VudCcpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI2IiAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ2RlYnQnLCdkaXNjb3VudEFtb3VudCcpIiAgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiICAgIDpkaXNhYmxlZD0ic2FsZVR5cGVEaXMiICAgICB2LW1vZGVsPSJkaXNjb3VudEFtb3VudCIgbGFiZWw9IkfDvHrJmcWfdCBtyZlibMmZxJ9pIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnZGVidCcsJ2Rpc2NvdW50QW1vdW50JykubWFuZGF0b3J5fSIgcmVxdWlyZWQgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPiAKICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgPC92LWNhcmQ+PC92LXRhYi1pdGVtPgogICAgICA8di10YWItaXRlbSB2YWx1ZT0idGFiLTIiPiA8di1jYXJkIGZsYXQ+IAogICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS10YWJzIj5TYXTEsWPEsTwvZGl2PgogICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkKCdzZWxsZXJJZCcpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdCAgIDppdGVtcz0iYWxsc2VsbGVycyIgaXRlbS12YWx1ZT0iaWQiIDppdGVtLXRleHQ9Iml0ZW0gPT4gaXRlbS5wZXJzb25uZWxOYW1lICsnICcraXRlbS5wZXJzb25uZWxTdXJuYW1lKycgJysgaXRlbS5wZXJzb25uZWxQYXRyb255bWljIiAgICB2LW1vZGVsPSdmb3JtRGF0YS5zZWxsZXJJZCcgIGxhYmVsPSJBZCwgU295YWQsIEF0YSBhZMSxIiAgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ3NlbGxlcklkJyl9IiA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgY2xhc3M9InRpdGxlLXRhYnMiPiAKICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBjbGFzcz0iZC1mbGV4IGZsZXgtcm93IHItYnV0dG9ucyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiA+QWzEsWPEsTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpby1ncm91cCAgICB2LW1vZGVsPSJmb3JtRGF0YS5idXllci50eXBlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcmFkaW8gdmFsdWU9IlgiIHYtaWY9IiBjaGVja0ZpZWxkQnV5ZXIoJ3R5cGUnLCdYJykiICBsYWJlbD0iVsmZa2lsIGVkaWzJmW4gxZ/JmXhzIiA+PC92LXJhZGlvPiAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpbyB2YWx1ZT0iUCIgdi1pZj0iIGNoZWNrRmllbGRCdXllcigndHlwZScsJ1AnKSIgbGFiZWw9IkZpemlraSDFn8mZeHMiPjwvdi1yYWRpbz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJhZGlvIHZhbHVlPSJKIiB2LWlmPSIgY2hlY2tGaWVsZEJ1eWVyKCd0eXBlJywnSicpIiAgbGFiZWw9IkjDvHF1cWkgxZ/JmXhzIj48L3YtcmFkaW8+IAogICAgICAgICAgICAgICAgICAgICAgICA8L3YtcmFkaW8tZ3JvdXA+IAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgdi1pZj0iZm9ybURhdGEuYnV5ZXIudHlwZSI+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnbmFtZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IkFkxLEiICAgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIubmFtZSIgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCduYW1lJyl9IiByZXF1aXJlZCA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdzdXJuYW1lJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlNveWFkxLEiICB2LW1vZGVsPSJmb3JtRGF0YS5idXllci5zdXJuYW1lIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ3N1cm5hbWUnKX0iIHJlcXVpcmVkID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ3BhdHJvbnltaWMnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSJBdGEgYWTEsSIgIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLnBhdHJvbnltaWMiICByZXF1aXJlZCAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgncGF0cm9ueW1pYycpfSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ2ZvdW5kZXJGdWxsTmFtZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlTJmXNpc8OnaSIgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuZm91bmRlckZ1bGxOYW1lIiAgcmVxdWlyZWQgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ2ZvdW5kZXJGdWxsTmFtZScpfSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdhY3R1YWxBZGRyZXNzJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iRmFrdGlraSDDvG52YW7EsSIgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuYWN0dWFsQWRkcmVzcyIgIHJlcXVpcmVkICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdhY3R1YWxBZGRyZXNzJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnYWRkcmVzcycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IsOcbnZhbiIgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuYWRkcmVzcyIgIHJlcXVpcmVkICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdhZGRyZXNzJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdjZXJ0aWZpY2F0ZU51bWJlcicpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IsWeyZloYWTJmXRuYW3JmSDihJYiICAgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuY2VydGlmaWNhdGVOdW1iZXIiICByZXF1aXJlZCAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgnY2VydGlmaWNhdGVOdW1iZXInKX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnY2hhcnRlck51bWJlcicpIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSJOaXphbW5hbcmZIOKEliIgIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLmNoYXJ0ZXJOdW1iZXIiICByZXF1aXJlZCB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdjaGFydGVyTnVtYmVyJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPiAKICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnaWRlbnRpdHlEb2N1bWVudFNlcmlhbCcpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgY2xhc3M9InVwcC1jYXNlIiBwbGFjZWhvbGRlcj0iQVpFL0FBIiBsYWJlbD0iVsmZc2lxyZluaW4gc2VyaXlhc8SxIHbJmSBuw7ZtcsmZc2kiIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLmlkZW50aXR5RG9jdW1lbnRTZXJpYWwiICByZXF1aXJlZCB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdpZGVudGl0eURvY3VtZW50U2VyaWFsJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnaWRlbnRpdHlEb2N1bWVudE51bWJlcicpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbWF4TGVuZ3RoPSI3IiBsYWJlbD0iRsSwTiBrb2R1IiB2LW1vZGVsPSJmb3JtRGF0YS5idXllci5pZGVudGl0eURvY3VtZW50TnVtYmVyIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgnaWRlbnRpdHlEb2N1bWVudE51bWJlcicpfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gIHNsb3Q9ImFwcGVuZCI+CiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAKICAgICAgICAgPHYtaWNvbiB2LW9uPSJvbiIgY29sb3I9InByaW1hcnkiIGRhcmsgIHYtYmluZD0iYXR0cnMiPgogICAgICAgICAgICAgICAgICBmb3J1bQogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgIDwvdGVtcGxhdGU+CiAgICAgPGRpdiBjbGFzcz0iYWxpZ24tY2VudGVyIj4KICAgICAgICA8di1pbWcgCiAgICAgICAgICBjbGFzcz0ic2hyaW5rIG1yLTIiCiAgICAgICAgICBjb250YWluCiAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy90b29sdGlwLnBuZyIKICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICB3aWR0aD0iNTAwIgogICAgICAgIC8+CiAgICAgPC9kaXY+CiAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgncG93ZXJPZkF0dG9ybmV5TnVtYmVyJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iRXRpYmFybmFtyZkg4oSWIiAgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIucG93ZXJPZkF0dG9ybmV5TnVtYmVyIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgncG93ZXJPZkF0dG9ybmV5TnVtYmVyJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdwb3dlck9mQXR0b3JuZXlEYXRlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9ImZvcm1EYXRhLmJ1eWVyLnBvd2VyT2ZBdHRvcm5leURhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJFdGliYXJuYW3JmSB0YXJpeGkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJldmVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgncG93ZXJPZkF0dG9ybmV5RGF0ZScpfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXIgOmZpcnN0LWRheS1vZi13ZWVrPSIxIiB2LW1vZGVsPSJmb3JtYXRwb3dlck9mQXR0b3JuZXlEYXRlIiBAaW5wdXQ9Im1lbnUzID0gZmFsc2UiPjwvdi1kYXRlLXBpY2tlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgndGF4TnVtYmVyJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlbDlkVOIiAgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIudGF4TnVtYmVyIiByZXF1aXJlZCAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgndGF4TnVtYmVyJyl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgIDwvdi1jYXJkPjwvdi10YWItaXRlbT4KICAgICAgPHYtdGFiLWl0ZW0gdmFsdWU9InRhYi0zIj4gICA8di1jYXJkIGZsYXQ+CiAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtdGFicyI+T2J5ZWt0PC9kaXY+CiAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCduYW1lJykiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iT2J5ZWt0aW4gYWTEsSIgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5uYW1lIiB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ25hbWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ29iamVjdFZhbHVlJykiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgIGxhYmVsPSJPYnlla3RpbiBkyZl5yZlyaSIgICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQub2JqZWN0VmFsdWUiIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0Jywnb2JqZWN0VmFsdWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICA8di1jb2wgICBjb2xzPSIxMiIgICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywncHJvY2xhbWF0aW9uTnVtYmVyJykiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSJTyZlyyZluY2FtIOKEliIgICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQucHJvY2xhbWF0aW9uTnVtYmVyIiB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3Byb2NsYW1hdGlvbk51bWJlcicpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3Byb2NsYW1hdGlvbkRhdGUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtZW51NCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLWNvbnRlbnQtY2xpY2s9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bnVkZ2UtcmlnaHQ9IjQwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldC15CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4td2lkdGg9IjI5MHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iZm9ybURhdGEuc29sZEFzc2V0LnByb2NsYW1hdGlvbkRhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJTyZlyyZluY2FtIHRhcml4aSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kLWljb249ImV2ZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdwcm9jbGFtYXRpb25EYXRlJykubWFuZGF0b3J5fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXIgOmZpcnN0LWRheS1vZi13ZWVrPSIxIiB2LW1vZGVsPSJmb3JtYXRwcm9jbGFtYXRpb25EYXRlIiBAaW5wdXQ9Im1lbnU0ID0gZmFsc2UiPjwvdi1kYXRlLXBpY2tlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2FyZWEnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJPYnlla3RpbiBzYWjJmXNpIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5hcmVhIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXJlYScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2dyb3VuZFZhbHVlJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJUb3JwYXEgZMmZecmZcmkiICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQuZ3JvdW5kVmFsdWUiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdncm91bmRWYWx1ZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiIHRpdGxlPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gc2F5xLEiICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0Jywnc2hhcmVDb3VudCcpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiICAgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBzYXnEsSIgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LnNoYXJlQ291bnQiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdzaGFyZUNvdW50JykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiIHRpdGxlPSdTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gcWl5bcmZdGknICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3NoYXJlc0luaXRpYWxTYWxlUHJpY2UnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBxaXltyZl0aSIgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LnNoYXJlc0luaXRpYWxTYWxlUHJpY2UiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdzaGFyZXNJbml0aWFsU2FsZVByaWNlJykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiIHRpdGxlPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gbm9taW5hbCBkyZl5yZlyaSIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCd0b3RhbFNoYXJlTm9taW5hbFZhbHVlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBub21pbmFsIGTJmXnJmXJpIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC50b3RhbFNoYXJlTm9taW5hbFZhbHVlIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZU5vbWluYWxWYWx1ZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgIHRpdGxlPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gYmlyIHPJmWhtaW4gbm9taW5hbCBkyZl5yZlyaSIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdzaW5nbGVTaGFyZU5vbWluYWxWYWx1ZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gYmlyIHPJmWhtaW4gbm9taW5hbCBkyZl5yZlyaSIgICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQuc2luZ2xlU2hhcmVOb21pbmFsVmFsdWUiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdzaW5nbGVTaGFyZU5vbWluYWxWYWx1ZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiB0aXRsZT0iU2F0xLHFn2Egw6fEsXhhcsSxbGFuIHPJmWhtbMmZcmluIGlsa2luIGjJmXJyYWMgcWl5bcmZdGkiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZUluaXRpYWxCaWRQcmljZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBpbGtpbiBoyZlycmFjIHFpeW3JmXRpIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC50b3RhbFNoYXJlSW5pdGlhbEJpZFByaWNlIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZUluaXRpYWxCaWRQcmljZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiB0aXRsZT0iU2F0xLHFn2Egw6fEsXhhcsSxbGFuIHPJmWhtbMmZcmluIGF4xLFyxLFuY8SxIGjJmXJyYWMgcWl5bcmZdGkiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZUZpbmFsQmlkUHJpY2UnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBheMSxcsSxbmPEsSBoyZlycmFjIHFpeW3JmXRpIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC50b3RhbFNoYXJlRmluYWxCaWRQcmljZSIgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3RvdGFsU2hhcmVGaW5hbEJpZFByaWNlJykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXV0aG9yaXplZENhcGl0YWxQZXJjZW50JykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9Ik5pemFtbmFtyZkgIGthcGl0YWzEsW7EsW4gZmFpemkiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmF1dGhvcml6ZWRDYXBpdGFsUGVyY2VudCIgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2F1dGhvcml6ZWRDYXBpdGFsUGVyY2VudCcpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2F1dGhvcml6ZWRDYXBpdGFsVmFsdWUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgb25pbnB1dD0idGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgvKFwuLiopXC4vZywgJyQxJyk7IiBsYWJlbD0iTml6YW1uYW3JmSAga2FwaXRhbMSxbsSxbiBxaXltyZl0aSAiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmF1dGhvcml6ZWRDYXBpdGFsVmFsdWUiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdhdXRob3JpemVkQ2FwaXRhbFZhbHVlJykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXV0aG9yaXplZENhcGl0YWxWb2x1bWUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJOaXphbW5hbcmZICBrYXBpdGFsxLFuxLFuIGTJmXnJmXJpICIgICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQuYXV0aG9yaXplZENhcGl0YWxWb2x1bWUiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdhdXRob3JpemVkQ2FwaXRhbFZvbHVtZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLXRhYnMiPk9ieWVrdGluIMO8bnZhbsSxPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAnYWRkcmVzcycpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iw5xudmFuIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5hZGRyZXNzLmFkZHJlc3MiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAnYWRkcmVzcycpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkU3ViQ2hpbGRzKCdzb2xkQXNzZXQnLCdhZGRyZXNzJywgJ2NpdHlUb3duSWQnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3Qgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFkZHJlc3MuY2l0eVRvd25JZCIgOml0ZW1zPSJhbGx0b3duIiBpdGVtLXZhbHVlPSJpZCIgaXRlbS10ZXh0PSJkZXNjcmlwdGlvbiIgbGFiZWw9IlJheW9uIiAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkU3ViQ2hpbGRzKCdzb2xkQXNzZXQnLCdhZGRyZXNzJywgJ2NpdHlUb3duSWQnKS5tYW5kYXRvcnl9Ij48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiAgdi1pZj0iY2hlY2tGaWVsZFN1YkNoaWxkcygnc29sZEFzc2V0JywnYWRkcmVzcycsICdjb3VudHJ5SWQnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3Qgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFkZHJlc3MuY291bnRyeUlkIiA6aXRlbXM9ImFsbGNvdW50cnkiIGl0ZW0tdmFsdWU9ImlkIiBpdGVtLXRleHQ9ImRlc2NyaXB0aW9uIiBsYWJlbD0iw5Zsa8mZIiAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkU3ViQ2hpbGRzKCdzb2xkQXNzZXQnLCdhZGRyZXNzJywgJ2NvdW50cnlJZCcpLm1hbmRhdG9yeX0iPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAncmVnaW9uSWQnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3Qgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFkZHJlc3MucmVnaW9uSWQiIDppdGVtcz0iYWxscmVnaW9uIiBpdGVtLXZhbHVlPSJpZCIgaXRlbS10ZXh0PSJkZXNjcmlwdGlvbiIgbGFiZWw9IsWeyZloyZlyIiAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkU3ViQ2hpbGRzKCdzb2xkQXNzZXQnLCdhZGRyZXNzJywgJ3JlZ2lvbklkJykubWFuZGF0b3J5fSI+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgPC92LXRhYi1pdGVtPgogICAgICA8di10YWItaXRlbSB2YWx1ZT0idGFiLTQiIGNsYXNzPSd0YWJsZXMtdGFiJz4gICAgIDx2LWNhcmQgZmxhdD4gCiAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8di1yb3cgID4gCiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGQoJ2F1Y3Rpb25EYXRlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9ImZvcm1EYXRhLmF1Y3Rpb25EYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iSMmZcnJhYyB0YXJpeGkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJldmVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ2F1Y3Rpb25EYXRlJykgfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXIgOmZpcnN0LWRheS1vZi13ZWVrPSIxIiB2LW1vZGVsPSJmb3JtYXRhdWN0aW9uRGF0ZSIgQGlucHV0PSJtZW51NSA9IGZhbHNlIj48L3YtZGF0ZS1waWNrZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgIHYtaWY9ImNoZWNrRmllbGQoJ2F1Y3Rpb25OdW1iZXInKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSJIyZlycmFjIOKEliIgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdhdWN0aW9uTnVtYmVyJykgfSIgIHYtbW9kZWw9ImZvcm1EYXRhLmF1Y3Rpb25OdW1iZXIiIHJlcXVpcmVkID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgIHYtaWY9ImNoZWNrRmllbGQoJ3Byb3RvY29sTnVtYmVyJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlByb3Rva29sIOKEliIgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdwcm90b2NvbE51bWJlcicpIH0iIHYtbW9kZWw9ImZvcm1EYXRhLnByb3RvY29sTnVtYmVyIiByZXF1aXJlZCA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgIHYtaWY9ImNoZWNrRmllbGQoJ3JlZ2lzdHJhdGlvbk51bWJlcicpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlFleWRpeXlhdCDihJYiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ3JlZ2lzdHJhdGlvbk51bWJlcicpIH0iICB2LW1vZGVsPSJmb3JtRGF0YS5yZWdpc3RyYXRpb25OdW1iZXIiIHJlcXVpcmVkID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICB2LWlmPSJjaGVja0ZpZWxkKCdyZW50Q29udHJhY3REYXRlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249Im1lbnUyc2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldC15CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4td2lkdGg9IjI5MHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iZm9ybURhdGEucmVudENvbnRyYWN0RGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IsSwY2FyyZkgbcO8cWF2aWzJmXNpbmluIHRhcml4aSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kLWljb249ImV2ZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgncmVudENvbnRyYWN0RGF0ZScpIH0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRhdGUtcGlja2VyICA6Zmlyc3QtZGF5LW9mLXdlZWs9IjEiIHYtbW9kZWw9ImZvcm1hdHJlbnRDb250cmFjdERhdGUiIEBpbnB1dD0ibWVudTYgPSBmYWxzZSI+PC92LWRhdGUtcGlja2VyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZCgncmVudENvbnRyYWN0TnVtYmVyJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0ixLBjYXLJmSBtw7xxYXZpbMmZc2luaW4gbsO2bXLJmXNpIiAgdi1tb2RlbD0iZm9ybURhdGEucmVudENvbnRyYWN0TnVtYmVyIiByZXF1aXJlZCB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ3JlbnRDb250cmFjdE51bWJlcicpIH0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgIAogICAgICAgICAgICAgICAgICAgICA8di1yb3cgY2xhc3M9InRpdGxlLXRhYnMiPiAKICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBjbGFzcz0iICIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TyZluyZlkbMmZcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImZsb2F0OnJpZ2h0Ij4KICAgIDx2LWRpYWxvZwogICAgICB2LW1vZGVsPSJkaWFsb2ciCiAgICAgIHdpZHRoPSI1MDAiCiAgICA+CiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgIAogICAgICAgICAgPHYtYnRuICBpY29uICAgY2xhc3M9J2hybW9yZXZlcnQnCiAgICAgICAgICAgdGV4dAogICAgICAgICAgdi1vbj0ib24iPgogICAgICAgICAgPHYtaWNvbj5hZGRfYm94PC92LWljb24+CiAgICAgICAgCiAgICAgICAgIDwvdi1idG4+CiAgICAgIDwvdGVtcGxhdGU+CgogICAgICA8di1jYXJkPgogICAgICAgIDx2LWNhcmQtdGl0bGUKICAgICAgICAgIGNsYXNzPSJtb2RhbC1oZWFkZXIiCiAgICAgICAgICAgCiAgICAgICAgPgogICAgICAgICAgPHNwYW4+WWVuaSBTyZluyZlkPC9zcGFuPgogICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAKICAgICAgICAgICA8di1idG4KICAgICAgICAgICBpY29uCiAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgIEBjbGljaz0iZGlhbG9nID0gZmFsc2UiCiAgICAgICAgICA+PHYtaWNvbj5jYW5jZWw8L3YtaWNvbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgCiAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgCiAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8di1jb2wgIGNsYXNzPSJ0ZXh0LWNlbnRlciBpbnB1dGZpbGUiIGNvbHM9IjEyIiAgICBtZD0iMTIiID4gCiAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0ICAgbXVsdGlwbGUgc3R5bGU9ImRpc3BsYXk6bm9uZTsiIHJlZj0iZmlsZUlucHV0MCIgdHlwZT0iZmlsZSIgQGNoYW5nZT0ib25GaWxlU2VsZWN0ZWQiPiAKICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gIGNsYXNzPSJmaWxlX2J1dHRvbiIgIEBjbGljaz0iJHJlZnMuZmlsZUlucHV0MC5jbGljaygpIiAgIGxhYmVsPSJGaWxlIGlucHV0Ij4ge3tmbmFtZX19PC92LWJ0bj4KICAgICAgICAgICAgICAgICA8L3YtY29sPiAKICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZXJhZml4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICA8di10ZXh0YXJlYSBjbGFzcz0idHh0YXJlYSIgCiAgICAgICAgICBzb2xvCiAgICAgICAgICBuYW1lPSJpbnB1dC03LTQiCiAgICAgICAgICAgbGFiZWw9IlTJmXN2aXJpIgogICAgICAgICAgdi1tb2RlbD0iZGVzY3JpcHRpb24iCiAgICAgICAgICAKICAgICAgICA+PC92LXRleHRhcmVhPiAKICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgIDwvdi1yb3c+IAogICAgICAgIDx2LWRpdmlkZXI+PC92LWRpdmlkZXI+IAogICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0nZGlhbG9nLWJ1dHRvbnMnPgogICAgICAgICAgIDx2LWJ0biAgICAgY2xhc3M9ImJ0bi1jYW5jZWwiIG91dGxpbmVkPsSwTVTEsE5BIEVUPC92LWJ0bj4gCiAgICAgICAgICAgICA8di1idG4gICAgdHlwZT0ic3VibWl0IiBAY2xpY2s9ImZpbGVzQXJyYXkoKSIgY2xhc3M9ImJ0bi1hZGQiID5Uxo9TRMSwUSBFVDwvdi1idG4+IAogICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgCiAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgPC92LWNhcmQ+CiAgICAgICAgCiAgICA8L3YtZGlhbG9nPgogIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8di1jb2wgICBjb2xzPSIxMiIgICBtZD0iMTIiID4gCiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLWNvbXBvbmVuZXQiPgogIDx2LXNpbXBsZS10YWJsZT4KICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZGVmYXVsdD4KICAgICAgPHRoZWFkPgogICAgICAgIDx0cj4KICAgICAgICAgIDx0aCBpZD0nMScgY2xhc3M9InRleHQtY2VudGVyIj7ihJY8L3RoPgogICAgICAgICAgPHRoIGlkPScyJyAgY2xhc3M9InRleHQtY2VudGVyIj5GYXlsxLFuIGFkxLE8L3RoPgogICAgICAgICAgPHRoIGlkPSczJyAgY2xhc3M9InRleHQtY2VudGVyIj5UyZlzdmlyaTwvdGg+IAogICAgICAgICAgICAgIAogICAgICAgICAgPHRoIGlkPSc2JyAgY2xhc3M9InRleHQtY2VudGVyIj5TaWw8L3RoPgogICAgICAgIDwvdHI+CiAgICAgIDwvdGhlYWQ+CiAgICAgIDx0Ym9keT4KICAgICAgICA8dHIgdi1pZj0iYWxsZmlsZXMubGVuZ3RoID09PSAwIiBjbGFzcz0ibm9yZWNvcmQiPgogICAgICAgICAgPHRkIGNvbHNwYW49IjQiPlPJmW7JmWQgyZlsYXbJmSBvbHVubWF5xLFiLi4uPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0ciB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBhbGxmaWxlcyIgOmtleT0iaXRlbS5pZCI+CiAgICAgICAgICA8dGQ+e3sgaW5kZXgrMSB9fTwvdGQ+CiAgICAgICAgICA8dGQ+e3sgaXRlbS5maWxlbmFtZS5uYW1lIH19PC90ZD4KICAgICAgICAgIDx0ZD57eyBpdGVtLmZpbGVfZGVzfX08L3RkPiAKICAgICAgICAgIDx0ZCAgc3R5bGU9IndpZHRoOjIwcHgiPiAKICAgICAgICAgICAgPHYtYnRuIEBjbGljaz0icmVtb3ZlRmlsZShpbmRleCkiIGNsYXNzPSJyZW1vdmVGaWxlIj48di1pY29uPmNsZWFyPC92LWljb24+PC92LWJ0bj4KICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgPC90Ym9keT4KICAgIDwvdGVtcGxhdGU+CiAgPC92LXNpbXBsZS10YWJsZT4gCgogIDwvZGl2PiAKIAogICAgICAgICAgICAgICAgIDwvdi1jb2w+IAogICAgCiAgICAgICAKICAgICAgICAgICAgIDwvdi1yb3c+IAogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgIDwvdi1jYXJkPiA8L3YtdGFiLWl0ZW0+CiAgICAgICA8di10YWItaXRlbSB2YWx1ZT0idGFiLTUiIGNsYXNzPSd0YWJsZXMtdGFiJz4KICAgICAgICAgICAgIDx2LWNhcmQgZmxhdD4gCiAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLXRhYnMiPiBNw7xxYXZpbMmZIDwvZGl2PgogICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiA6dGl0bGU9ImdldENvbnRUeXBlVGl0bGUoZm9ybURhdGEuY29udHJhY3RUeXBlSWQpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdCB2LW1vZGVsPSJmb3JtRGF0YS5jb250cmFjdFR5cGVJZCIgOml0ZW1zPSJhbGxjb250cmFjdHR5cGUiIGl0ZW0tdmFsdWU9ImlkIiBpdGVtLXRleHQ9ImRlc2NyaXB0aW9uIiBsYWJlbD0iVGlwaSIgQGNoYW5nZT0iZ2V0Rm9ybURhdGEoKSIgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdjb250cmFjdFR5cGVJZCcpIH0iID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iNiIgbWQ9IjQiICB2LWlmPSJjaGVja0ZpZWxkKCdjb250cmFjdERhdGUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtZW51MTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmb3JtRGF0YS5jb250cmFjdERhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlRhcml4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJldmVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ2NvbnRyYWN0RGF0ZScpIH0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRhdGUtcGlja2VyICA6Zmlyc3QtZGF5LW9mLXdlZWs9IjEiIHYtbW9kZWw9ImZvcm1hdGNvbnRyYWN0RGF0ZSIgQGlucHV0PSJtZW51MTUgPSBmYWxzZSI+PC92LWRhdGUtcGlja2VyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICAgdi1pZj0iY2hlY2tGaWVsZCgnY29udHJhY3ROdW1iZXInKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSJOw7ZtcsmZc2kiICB2LW1vZGVsPSJmb3JtRGF0YS5jb250cmFjdE51bWJlciIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnY29udHJhY3ROdW1iZXInKSB9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iNiIgbWQ9IjQiICB2LWlmPSJjaGVja0ZpZWxkKCdleGVjdXRpdmVPcmRlckRhdGUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtZW51MjUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtRGF0YS5leGVjdXRpdmVPcmRlckRhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSLGj21yaW4gdGFyaXhpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj0iZXZlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnZXhlY3V0aXZlT3JkZXJEYXRlJyl9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1kYXRlLXBpY2tlciAgOmZpcnN0LWRheS1vZi13ZWVrPSIxIiB2LW1vZGVsPSJmb3JtYXRleGVjdXRpdmVPcmRlckRhdGUiIEBpbnB1dD0ibWVudTI1ID0gZmFsc2UiPjwvdi1kYXRlLXBpY2tlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgICB2LWlmPSJjaGVja0ZpZWxkKCdleGVjdXRpdmVPcmRlck51bWJlcicpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICB2LW1vZGVsPSJmb3JtRGF0YS5leGVjdXRpdmVPcmRlck51bWJlciIgbGFiZWw9IsaPbXJpbiBuw7ZtcsmZc2kiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdleGVjdXRpdmVPcmRlck51bWJlcicpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgICB2LWlmPSJjaGVja0ZpZWxkKCdjb250cmFjdFBsYWNlJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICAgdi1tb2RlbD0iZm9ybURhdGEuY29udHJhY3RQbGFjZSIgbGFiZWw9Ik3DvHFhdmlsyZluaW4gYmHEn2xhbmTEscSfxLEgeWVyIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnY29udHJhY3RQbGFjZScpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLXRhYnMiPiDDlmTJmW5pbMmZbiBtyZlibMmZxJ8gPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI2IiAgdi1pZj0iY2hlY2tGaWVsZCgnY29udHJhY3RMaWFiaWxpdHlJZCcpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdCAgIHYtbW9kZWw9ImZvcm1EYXRhLmNvbnRyYWN0TGlhYmlsaXR5SWQiIDppdGVtcz0iYWxsY29udHJhY3RsaWFiaWxpdHkiIGl0ZW0tdmFsdWU9ImlkIiBpdGVtLXRleHQ9ImRlc2NyaXB0aW9uIiBsYWJlbD0iw5ZkyZltyZkgbsO2dsO8IiAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdjb250cmFjdExpYWJpbGl0eUlkJyl9Ij48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjYiICAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdkZWJ0JywnaW5pdGlhbFBheW1lbnQnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIHYtbW9kZWw9ImZvcm1EYXRhLmRlYnQuaW5pdGlhbFBheW1lbnQiIGxhYmVsPSJCZWgiICAgcmVxdWlyZWQgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnZGVidCcsJ2luaXRpYWxQYXltZW50JykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI2IiAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ2RlYnQnLCdzYWxlUHJpY2UnKSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgdi1tb2RlbD0ic2FsZVByaWNlIiBsYWJlbD0iU2F0xLHFnyBxaXltyZl0aSIgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdkZWJ0Jywnc2FsZVByaWNlJykubWFuZGF0b3J5fSIgcmVxdWlyZWQgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCgogICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgICBtZD0iMTIiIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ2RlYnQnLCdkaXNjb3VudFBlcmNlbnQnKSI+ICAKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJhZGlvLWdyb3VwICAgIHYtbW9kZWw9InNhbGVUeXBlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcmFkaW8gdmFsdWU9IjAiICBsYWJlbD0iR8O8esmZxZ90IGZhaXppbsmZIGfDtnLJmSBnw7x6yZnFn3QgbcmZYmzJmcSfaSB0yZl5aW4gb2x1bnN1biIgPjwvdi1yYWRpbz4gCiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcmFkaW8gdmFsdWU9IjEiICAgbGFiZWw9IkfDvHrJmcWfdCBtyZlibMmZxJ9pbsmZIGfDtnLJmSBnw7x6yZnFn3QgZmFpemkgIHTJmXlpbiBvbHVuc3VuIj48L3YtcmFkaW8+IAogICAgICAgICAgICAgICAgICAgICAgICA8L3YtcmFkaW8tZ3JvdXA+IAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNiIgICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnZGVidCcsJ2Rpc2NvdW50UGVyY2VudCcpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICAgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiICA6ZGlzYWJsZWQ9IiFzYWxlVHlwZURpcyIgICAgICB2LW1vZGVsPSJkaXNjb3VudFBlcmNlbnQiIGxhYmVsPSJHw7x6yZnFn3QgZmFpemkiICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdkZWJ0JywnZGlzY291bnRQZXJjZW50JykubWFuZGF0b3J5fSIgIHJlcXVpcmVkID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjYiICAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdkZWJ0JywnZGlzY291bnRBbW91bnQnKSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgICA6ZGlzYWJsZWQ9InNhbGVUeXBlRGlzIiAgICB2LW1vZGVsPSJkaXNjb3VudEFtb3VudCIgbGFiZWw9IkfDvHrJmcWfdCBtyZlibMmZxJ9pIiAgIHJlcXVpcmVkID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLXRhYnMiPlNhdMSxY8SxPC9kaXY+CiAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGQoJ3NlbGxlcklkJykiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0ICAgOml0ZW1zPSJhbGxzZWxsZXJzIiBpdGVtLXZhbHVlPSJpZCIgOml0ZW0tdGV4dD0iaXRlbSA9PiBpdGVtLnBlcnNvbm5lbE5hbWUgKycgJytpdGVtLnBlcnNvbm5lbFN1cm5hbWUrJyAnKyBpdGVtLnBlcnNvbm5lbFBhdHJvbnltaWMiICAgIHYtbW9kZWw9J2Zvcm1EYXRhLnNlbGxlcklkJyAgbGFiZWw9IkFkLCBTb3lhZCwgQXRhIGFkxLEiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ3NlbGxlcklkJyl9IiA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0idGl0bGUtdGFicyI+IAogICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIGNsYXNzPSJkLWZsZXggZmxleC1yb3cgci1idXR0b25zIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuID5BbMSxY8SxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpby1ncm91cCAgICB2LW1vZGVsPSJmb3JtRGF0YS5idXllci50eXBlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcmFkaW8gdmFsdWU9IlgiICAgIHYtaWY9IiBjaGVja0ZpZWxkQnV5ZXIoJ3R5cGUnLCdYJykiICBsYWJlbD0iVsmZa2lsIGVkaWzJmW4gxZ/JmXhzIiA+PC92LXJhZGlvPiAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpbyB2YWx1ZT0iUCIgdi1pZj0iIGNoZWNrRmllbGRCdXllcigndHlwZScsJ1AnKSIgIGxhYmVsPSJGaXppa2kgxZ/JmXhzIj48L3YtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yYWRpbyB2YWx1ZT0iSiIgIHYtaWY9IiBjaGVja0ZpZWxkQnV5ZXIoJ3R5cGUnLCdKJykiIGxhYmVsPSJIw7xxdXFpIMWfyZl4cyI+PC92LXJhZGlvPiAKICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJhZGlvLWdyb3VwPiAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnbmFtZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IkFkxLEiICAgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIubmFtZSIgIHJlcXVpcmVkIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ25hbWUnKX0iID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ3N1cm5hbWUnKSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iU295YWTEsSIgIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLnN1cm5hbWUiICByZXF1aXJlZCB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdzdXJuYW1lJyl9IiA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdwYXRyb255bWljJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iQXRhIGFkxLEiICB2LW1vZGVsPSJmb3JtRGF0YS5idXllci5wYXRyb255bWljIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgncGF0cm9ueW1pYycpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ2ZvdW5kZXJGdWxsTmFtZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlTJmXNpc8OnaSIgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuZm91bmRlckZ1bGxOYW1lIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgnZm91bmRlckZ1bGxOYW1lJyl9IiA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnYWN0dWFsQWRkcmVzcycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IkhhbCBoYXrEsXJrxLEgeWHFn2F5xLHFnyDDvG52YW7EsSIgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuYWN0dWFsQWRkcmVzcyIgIHJlcXVpcmVkIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ2FjdHVhbEFkZHJlc3MnKX0iID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnYWRkcmVzcycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlFleWRpeXlhdCDDvG52YW7EsSIgdi1tb2RlbD0iZm9ybURhdGEuYnV5ZXIuYWRkcmVzcyIgIHJlcXVpcmVkIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ2FkZHJlc3MnKX0iID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkc0J5VHlwZSgnY2VydGlmaWNhdGVOdW1iZXInKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSLFnsmZaGFkyZl0bmFtyZkg4oSWIiAgIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLmNlcnRpZmljYXRlTnVtYmVyIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgnY2VydGlmaWNhdGVOdW1iZXInKX0iID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdjaGFydGVyTnVtYmVyJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iTml6YW1uYW3JmSDihJYiICB2LW1vZGVsPSJmb3JtRGF0YS5idXllci5jaGFydGVyTnVtYmVyIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgnY2hhcnRlck51bWJlcicpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+IAogICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ2lkZW50aXR5RG9jdW1lbnRTZXJpYWwnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGNsYXNzPSJ1cHAtY2FzZSIgcGxhY2Vob2xkZXI9IkFaRS9BQSIgbGFiZWw9IlbJmXNpccmZbmluIHNlcml5YXPEsSB2yZkgbsO2bXLJmXNpIiB2LW1vZGVsPSJmb3JtRGF0YS5idXllci5pZGVudGl0eURvY3VtZW50U2VyaWFsIiAgcmVxdWlyZWQgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiAgY2hlY2tGaWVsZENoaWxkc0J5VHlwZU1hbmRhdG9yeSgnaWRlbnRpdHlEb2N1bWVudFNlcmlhbCcpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCdpZGVudGl0eURvY3VtZW50TnVtYmVyJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBtYXhMZW5ndGg9IjciIGxhYmVsPSJGxLBOIGtvZHUiIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLmlkZW50aXR5RG9jdW1lbnROdW1iZXIiICByZXF1aXJlZCB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdpZGVudGl0eURvY3VtZW50TnVtYmVyJyl9IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gIHNsb3Q9ImFwcGVuZCI+CiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAKICAgICAgICAgPHYtaWNvbiB2LW9uPSJvbiIgY29sb3I9InByaW1hcnkiIGRhcmsgIHYtYmluZD0iYXR0cnMiPgogICAgICAgICAgICAgICAgICBmb3J1bQogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgIDwvdGVtcGxhdGU+CiAgICAgPGRpdiBjbGFzcz0iYWxpZ24tY2VudGVyIj4KICAgICAgICA8di1pbWcgCiAgICAgICAgICBjbGFzcz0ic2hyaW5rIG1yLTIiCiAgICAgICAgICBjb250YWluCiAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy90b29sdGlwLnBuZyIKICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICB3aWR0aD0iNTAwIgogICAgICAgIC8+CiAgICAgPC9kaXY+CiAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ3Bvd2VyT2ZBdHRvcm5leU51bWJlcicpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IkV0aWJhcm5hbcmZIOKEliIgIHYtbW9kZWw9ImZvcm1EYXRhLmJ1eWVyLnBvd2VyT2ZBdHRvcm5leU51bWJlciIgIHJlcXVpcmVkIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ3Bvd2VyT2ZBdHRvcm5leU51bWJlcicpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRDaGlsZHNCeVR5cGUoJ3Bvd2VyT2ZBdHRvcm5leURhdGUnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTM1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tY29udGVudC1jbGljaz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpudWRnZS1yaWdodD0iNDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iMjkwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmb3JtRGF0YS5idXllci5wb3dlck9mQXR0b3JuZXlEYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iRXRpYmFybmFtyZkgdGFyaXhpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj0iZXZlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6ICBjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlTWFuZGF0b3J5KCdwb3dlck9mQXR0b3JuZXlEYXRlJyl9IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXIgIDpmaXJzdC1kYXktb2Ytd2Vlaz0iMSIgdi1tb2RlbD0iZm9ybWF0cG93ZXJPZkF0dG9ybmV5RGF0ZSIgQGlucHV0PSJtZW51MzUgPSBmYWxzZSI+PC92LWRhdGUtcGlja2VyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PiAKICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzQnlUeXBlKCd0YXhOdW1iZXInKSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iVsOWRU4iICB2LW1vZGVsPSJmb3JtRGF0YS5idXllci50YXhOdW1iZXIiIHJlcXVpcmVkIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogIGNoZWNrRmllbGRDaGlsZHNCeVR5cGVNYW5kYXRvcnkoJ3RheE51bWJlcicpfSIgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KCiAKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS10YWJzIj5PYnlla3Q8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICA8di1jb2wgICBjb2xzPSIxMiIgICBtZD0iNCIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ25hbWUnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9Ik9ieWVrdGluIGFkxLEiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0Lm5hbWUiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ25hbWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ29iamVjdFZhbHVlJykiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgb25pbnB1dD0idGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgvKFwuLiopXC4vZywgJyQxJyk7IiBsYWJlbD0iT2J5ZWt0aW4gZMmZecmZcmkiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0Lm9iamVjdFZhbHVlIiAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdvYmplY3RWYWx1ZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdwcm9jbGFtYXRpb25OdW1iZXInKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlPJmXLJmW5jYW0g4oSWIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5wcm9jbGFtYXRpb25OdW1iZXIiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3Byb2NsYW1hdGlvbk51bWJlcicpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdwcm9jbGFtYXRpb25EYXRlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTQ1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xvc2Utb24tY29udGVudC1jbGljaz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpudWRnZS1yaWdodD0iNDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iMjkwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmb3JtRGF0YS5zb2xkQXNzZXQucHJvY2xhbWF0aW9uRGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlPJmXLJmW5jYW0gdGFyaXhpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj0iZXZlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdwcm9jbGFtYXRpb25EYXRlJykubWFuZGF0b3J5fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXIgIDpmaXJzdC1kYXktb2Ytd2Vlaz0iMSIgIHYtbW9kZWw9ImZvcm1hdHByb2NsYW1hdGlvbkRhdGUiIEBpbnB1dD0ibWVudTQ1ID0gZmFsc2UiPjwvdi1kYXRlLXBpY2tlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXJlYScpIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9Ik9ieWVrdGluIHNhaMmZc2kiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFyZWEiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2FyZWEnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdncm91bmRWYWx1ZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9IlRvcnBhcSBkyZl5yZlyaSIgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5ncm91bmRWYWx1ZSIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnZ3JvdW5kVmFsdWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdzaGFyZUNvdW50JykiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiICAgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBzYXnEsSIgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LnNoYXJlQ291bnQiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3NoYXJlQ291bnQnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICA8di1jb2wgICBjb2xzPSIxMiIgICBtZD0iNCIgIHRpdGxlPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gcWl5bcmZdGkiICB2LWlmPSJjaGVja0ZpZWxkQ2hpbGRzKCdzb2xkQXNzZXQnLCdzaGFyZXNJbml0aWFsU2FsZVByaWNlJykiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiICBsYWJlbD0iU2F0xLHFn2Egw6fEsXhhcsSxbGFuIHPJmWhtbMmZcmluIHFpeW3JmXRpIiB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQuc2hhcmVzSW5pdGlhbFNhbGVQcmljZSIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0Jywnc2hhcmVzSW5pdGlhbFNhbGVQcmljZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgdGl0bGU9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBub21pbmFsIGTJmXnJmXJpIiAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZU5vbWluYWxWYWx1ZScpIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgb25pbnB1dD0idGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgvKFwuLiopXC4vZywgJyQxJyk7IiBsYWJlbD0iU2F0xLHFn2Egw6fEsXhhcsSxbGFuIHPJmWhtbMmZcmluIG5vbWluYWwgZMmZecmZcmkiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LnRvdGFsU2hhcmVOb21pbmFsVmFsdWUiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3RvdGFsU2hhcmVOb21pbmFsVmFsdWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiIHRpdGxlPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gYmlyIHPJmWhtaW4gbm9taW5hbCBkyZl5yZlyaSIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3NpbmdsZVNoYXJlTm9taW5hbFZhbHVlJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCAgIG9uaW5wdXQ9InRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLnJlcGxhY2UoLyhcLi4qKVwuL2csICckMScpOyIgbGFiZWw9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBiaXIgc8mZaG1pbiBub21pbmFsIGTJmXnJmXJpIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5zaW5nbGVTaGFyZU5vbWluYWxWYWx1ZSIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0Jywnc2luZ2xlU2hhcmVOb21pbmFsVmFsdWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgdGl0bGU9IlNhdMSxxZ9hIMOnxLF4YXLEsWxhbiBzyZlobWzJmXJpbiBpbGtpbiBoyZlycmFjIHFpeW3JmXRpIiAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZUluaXRpYWxCaWRQcmljZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gaWxraW4gaMmZcnJhYyBxaXltyZl0aSIgICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQudG90YWxTaGFyZUluaXRpYWxCaWRQcmljZSIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywndG90YWxTaGFyZUluaXRpYWxCaWRQcmljZScpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgIHRpdGxlPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gYXjEsXLEsW5jxLEgaMmZcnJhYyBxaXltyZl0aSIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3RvdGFsU2hhcmVGaW5hbEJpZFByaWNlJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJTYXTEscWfYSDDp8SxeGFyxLFsYW4gc8mZaG1syZlyaW4gYXjEsXLEsW5jxLEgaMmZcnJhYyBxaXltyZl0aSIgICByZXF1aXJlZCB2LW1vZGVsPSJmb3JtRGF0YS5zb2xkQXNzZXQudG90YWxTaGFyZUZpbmFsQmlkUHJpY2UiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ3RvdGFsU2hhcmVGaW5hbEJpZFByaWNlJykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgIHYtaWY9ImNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2F1dGhvcml6ZWRDYXBpdGFsUGVyY2VudCcpIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgb25pbnB1dD0idGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgvKFwuLiopXC4vZywgJyQxJyk7IiBsYWJlbD0iTml6YW1uYW3JmSBrYXB0YWzEsW7EsW4gZmFpemkiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmF1dGhvcml6ZWRDYXBpdGFsUGVyY2VudCIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXV0aG9yaXplZENhcGl0YWxQZXJjZW50JykubWFuZGF0b3J5fSI+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXV0aG9yaXplZENhcGl0YWxWYWx1ZScpIj4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgICBvbmlucHV0PSJ0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKS5yZXBsYWNlKC8oXC4uKilcLi9nLCAnJDEnKTsiIGxhYmVsPSJOaXphbW5hbcmZIGthcHRhbMSxbsSxbiBxaXltyZl0aSAiICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmF1dGhvcml6ZWRDYXBpdGFsVmFsdWUiICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRDaGlsZHMoJ3NvbGRBc3NldCcsJ2F1dGhvcml6ZWRDYXBpdGFsVmFsdWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICAgdi1pZj0iY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXV0aG9yaXplZENhcGl0YWxWb2x1bWUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkICAgb25pbnB1dD0idGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgvKFwuLiopXC4vZywgJyQxJyk7IiBsYWJlbD0iTml6YW1uYW3JmSBrYXB0YWzEsW7EsW4gZMmZecmZcmkgIiAgIHJlcXVpcmVkIHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5hdXRob3JpemVkQ2FwaXRhbFZvbHVtZSIgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZENoaWxkcygnc29sZEFzc2V0JywnYXV0aG9yaXplZENhcGl0YWxWb2x1bWUnKS5tYW5kYXRvcnl9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS10YWJzIj5PYnlla3RpbiDDvG52YW7EsTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgICBjb2xzPSIxMiIgICBtZD0iNCIgdi1pZj0iY2hlY2tGaWVsZFN1YkNoaWxkcygnc29sZEFzc2V0JywnYWRkcmVzcycsICdhZGRyZXNzJykiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGxhYmVsPSLDnG52YW4iICAgcmVxdWlyZWQgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFkZHJlc3MuYWRkcmVzcyIgICB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAnYWRkcmVzcycpLm1hbmRhdG9yeX0iPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSI0IiB2LWlmPSJjaGVja0ZpZWxkU3ViQ2hpbGRzKCdzb2xkQXNzZXQnLCdhZGRyZXNzJywgJ2NpdHlUb3duSWQnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3Qgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFkZHJlc3MuY2l0eVRvd25JZCIgOml0ZW1zPSJhbGx0b3duIiBpdGVtLXZhbHVlPSJpZCIgaXRlbS10ZXh0PSJkZXNjcmlwdGlvbiIgbGFiZWw9IlJheW9uIiAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZFN1YkNoaWxkcygnc29sZEFzc2V0JywnYWRkcmVzcycsICdjaXR5VG93bklkJykubWFuZGF0b3J5fSI+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAnY291bnRyeUlkJykiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0IHYtbW9kZWw9ImZvcm1EYXRhLnNvbGRBc3NldC5hZGRyZXNzLmNvdW50cnlJZCIgOml0ZW1zPSJhbGxjb3VudHJ5IiBpdGVtLXZhbHVlPSJpZCIgaXRlbS10ZXh0PSJkZXNjcmlwdGlvbiIgbGFiZWw9IsOWbGvJmSIgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkU3ViQ2hpbGRzKCdzb2xkQXNzZXQnLCdhZGRyZXNzJywgJ2NvdW50cnlJZCcpLm1hbmRhdG9yeX0iPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sICAgY29scz0iMTIiICAgbWQ9IjQiIHYtaWY9ImNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAncmVnaW9uSWQnKSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3Qgdi1tb2RlbD0iZm9ybURhdGEuc29sZEFzc2V0LmFkZHJlc3MucmVnaW9uSWQiIDppdGVtcz0iYWxscmVnaW9uIiBpdGVtLXZhbHVlPSJpZCIgaXRlbS10ZXh0PSJkZXNjcmlwdGlvbiIgbGFiZWw9IsWeyZloyZlyIiB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRTdWJDaGlsZHMoJ3NvbGRBc3NldCcsJ2FkZHJlc3MnLCAncmVnaW9uSWQnKS5tYW5kYXRvcnl9Ij48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgoKCgoKIAogICAgICAgICAgICAgICAgICAgICAgPHYtcm93ICA+IAogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI0IiAgdi1pZj0iY2hlY2tGaWVsZCgnYXVjdGlvbkRhdGUnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtZW51NTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm51ZGdlLXJpZ2h0PSI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9ImZvcm1EYXRhLmF1Y3Rpb25EYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iSMmZcnJhYyB0YXJpeGkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJldmVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdhdWN0aW9uRGF0ZScpIH0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRhdGUtcGlja2VyICA6Zmlyc3QtZGF5LW9mLXdlZWs9IjEiIHYtbW9kZWw9ImZvcm1hdGF1Y3Rpb25EYXRlIiBAaW5wdXQ9Im1lbnU1NSA9IGZhbHNlIj48L3YtZGF0ZS1waWNrZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICAgIHYtaWY9ImNoZWNrRmllbGQoJ2F1Y3Rpb25OdW1iZXInKSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iSMmZcnJhYyDihJYiICAgIHYtYmluZDpjbGFzcz0ieyByZXF1aXJlZDogY2hlY2tGaWVsZE1hbmRhdG9yeSgnYXVjdGlvbk51bWJlcicpIH0iICB2LW1vZGVsPSJmb3JtRGF0YS5hdWN0aW9uTnVtYmVyIiByZXF1aXJlZCA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkKCdwcm90b2NvbE51bWJlcicpIiAgPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBsYWJlbD0iUHJvdG9rb2wg4oSWIiAgdi1tb2RlbD0iZm9ybURhdGEucHJvdG9jb2xOdW1iZXIiIHJlcXVpcmVkICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdwcm90b2NvbE51bWJlcicpIH0iID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiICBtZD0iNCIgICB2LWlmPSJjaGVja0ZpZWxkKCdyZWdpc3RyYXRpb25OdW1iZXInKSIgID4KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgbGFiZWw9IlFleWRpeXlhdCDihJYiICB2LW1vZGVsPSJmb3JtRGF0YS5yZWdpc3RyYXRpb25OdW1iZXIiIHJlcXVpcmVkICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdyZWdpc3RyYXRpb25OdW1iZXInKSB9Ij48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiICB2LWlmPSJjaGVja0ZpZWxkKCdyZW50Q29udHJhY3REYXRlJykiID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im1lbnU2NSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLWNvbnRlbnQtY2xpY2s9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bnVkZ2UtcmlnaHQ9IjQwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ibWVudTJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iMjkwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJmb3JtRGF0YS5yZW50Q29udHJhY3REYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0ixLBjYXLJmSBtw7xxYXZpbMmZc2luaW4gdGFyaXhpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj0iZXZlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPSJ7IHJlcXVpcmVkOiBjaGVja0ZpZWxkTWFuZGF0b3J5KCdyZW50Q29udHJhY3REYXRlJykgfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXIgIDpmaXJzdC1kYXktb2Ytd2Vlaz0iMSIgdi1tb2RlbD0iZm9ybWF0cmVudENvbnRyYWN0RGF0ZSIgQGlucHV0PSJtZW51NjUgPSBmYWxzZSI+PC92LWRhdGUtcGlja2VyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiAgbWQ9IjQiIHRpdGxlPSLEsGNhcsmZIG3DvHFhdmlsyZlzaW5pbiBuw7ZtcsmZc2kiICAgdi1pZj0iY2hlY2tGaWVsZCgncmVudENvbnRyYWN0TnVtYmVyJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCB2LWJpbmQ6Y2xhc3M9InsgcmVxdWlyZWQ6IGNoZWNrRmllbGRNYW5kYXRvcnkoJ3JlbnRDb250cmFjdE51bWJlcicpIH0iICBsYWJlbD0ixLBjYXLJmSBtw7xxYXZpbMmZc2luaW4gbsO2bXLJmXNpIiAgdi1tb2RlbD0iZm9ybURhdGEucmVudENvbnRyYWN0TnVtYmVyIiByZXF1aXJlZCA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgIAogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0idGl0bGUtdGFicyI+IAogICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIGNsYXNzPSIgIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlPJmW7JmWRsyZlyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZmxvYXQ6cmlnaHQiPgogICAgPHYtZGlhbG9nCiAgICAgIHYtbW9kZWw9ImRpYWxvZyIKICAgICAgd2lkdGg9IjUwMCIKICAgID4KICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgCiAgICAgICAgICA8di1idG4gIGljb24gICBjbGFzcz0naHJtb3JldmVydCcKICAgICAgICAgICB0ZXh0CiAgICAgICAgICB2LW9uPSJvbiI+CiAgICAgICAgICA8di1pY29uPmFkZF9ib3g8L3YtaWNvbj4KICAgICAgICAKICAgICAgICAgPC92LWJ0bj4KICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgIDx2LWNhcmQ+CiAgICAgICAgPHYtY2FyZC10aXRsZQogICAgICAgICAgY2xhc3M9Im1vZGFsLWhlYWRlciIKICAgICAgICAgICAKICAgICAgICA+CiAgICAgICAgICA8c3Bhbj5ZZW5pIFPJmW7JmWQ8L3NwYW4+CiAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgIAogICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgIGljb24KICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgIHRleHQKICAgICAgICAgICAgQGNsaWNrPSJkaWFsb2cgPSBmYWxzZSIKICAgICAgICAgID48di1pY29uPmNhbmNlbDwvdi1pY29uPgogICAgICAgICAgICAKICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAKICAgICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAKICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCAgY2xhc3M9InRleHQtY2VudGVyIGlucHV0ZmlsZSIgY29scz0iMTIiICAgIG1kPSIxMiIgPiAKICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgICBtdWx0aXBsZSBzdHlsZT0iZGlzcGxheTpub25lOyIgcmVmPSJmaWxlSW5wdXQwIiB0eXBlPSJmaWxlIiBAY2hhbmdlPSJvbkZpbGVTZWxlY3RlZCI+IAogICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biAgY2xhc3M9ImZpbGVfYnV0dG9uIiAgQGNsaWNrPSIkcmVmcy5maWxlSW5wdXQwLmNsaWNrKCkiICAgbGFiZWw9IkZpbGUgaW5wdXQiPiB7e2ZuYW1lfX08L3YtYnRuPgogICAgICAgICAgICAgICAgIDwvdi1jb2w+IAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlcmFmaXgiPjwvZGl2PgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiI+CiAgICAgICAgIDx2LXRleHRhcmVhIGNsYXNzPSJ0eHRhcmVhIiAKICAgICAgICAgIHNvbG8KICAgICAgICAgIG5hbWU9ImlucHV0LTctNCIKICAgICAgICAgICBsYWJlbD0iVMmZc3ZpcmkiCiAgICAgICAgICB2LW1vZGVsPSJkZXNjcmlwdGlvbiIKICAgICAgICAgIAogICAgICAgID48L3YtdGV4dGFyZWE+IAogICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4gCiAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4gCiAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGNsYXNzPSdkaWFsb2ctYnV0dG9ucyc+CiAgICAgICAgICAgPHYtYnRuICAgICBjbGFzcz0iYnRuLWNhbmNlbCIgb3V0bGluZWQ+xLBNVMSwTkEgRVQ8L3YtYnRuPiAKICAgICAgICAgICAgIDx2LWJ0biAgICB0eXBlPSJzdWJtaXQiIEBjbGljaz0iZmlsZXNBcnJheSgpIiBjbGFzcz0iYnRuLWFkZCIgPlTGj1NExLBRIEVUPC92LWJ0bj4gCiAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAKICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICA8L3YtY2FyZD4KICAgICAgICAKICAgIDwvdi1kaWFsb2c+CiAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCAgIGNvbHM9IjEyIiAgIG1kPSIxMiIgPiAKICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtY29tcG9uZW5ldCI+CiAgPHYtc2ltcGxlLXRhYmxlPgogICAgPHRlbXBsYXRlIHYtc2xvdDpkZWZhdWx0PgogICAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgPHRoIGlkPScxJyBjbGFzcz0idGV4dC1jZW50ZXIiPuKEljwvdGg+CiAgICAgICAgICA8dGggaWQ9JzInICBjbGFzcz0idGV4dC1jZW50ZXIiPkZheWzEsW4gYWTEsTwvdGg+CiAgICAgICAgICA8dGggaWQ9JzMnICBjbGFzcz0idGV4dC1jZW50ZXIiPlTJmXN2aXJpPC90aD4gCiAgICAgICAgICAgICAgCiAgICAgICAgICA8dGggaWQ9JzYnICBjbGFzcz0idGV4dC1jZW50ZXIiPlNpbDwvdGg+CiAgICAgICAgPC90cj4KICAgICAgPC90aGVhZD4KICAgICAgPHRib2R5PgogICAgICAgIDx0ciB2LWlmPSJhbGxmaWxlcy5sZW5ndGggPT09IDAiIGNsYXNzPSJub3JlY29yZCI+CiAgICAgICAgICA8dGQgY29sc3Bhbj0iNCI+U8mZbsmZZCDJmWxhdsmZIG9sdW5tYXnEsWIuLi48L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAgPHRyIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGFsbGZpbGVzIiA6a2V5PSJpdGVtLmlkIj4KICAgICAgICAgIDx0ZD57eyBpbmRleCsxIH19PC90ZD4KICAgICAgICAgIDx0ZD57eyBpdGVtLmZpbGVuYW1lLm5hbWUgfX08L3RkPgogICAgICAgICAgPHRkPnt7IGl0ZW0uZmlsZV9kZXN9fTwvdGQ+IAogICAgICAgICAgPHRkICBzdHlsZT0id2lkdGg6MjBweCI+IAogICAgICAgICAgICA8di1idG4gQGNsaWNrPSJyZW1vdmVGaWxlKGluZGV4KSIgY2xhc3M9InJlbW92ZUZpbGUiPjx2LWljb24+Y2xlYXI8L3YtaWNvbj48L3YtYnRuPgogICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgogICAgICA8L3Rib2R5PgogICAgPC90ZW1wbGF0ZT4KICA8L3Ytc2ltcGxlLXRhYmxlPiAKCiAgPC9kaXY+IAogCiAgICAgICAgICAgICAgICAgPC92LWNvbD4gCiAgICAKICAgICAgIAogICAgICAgICAgICAgPC92LXJvdz4gCiAgICAgICAgICAKICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgPC92LWNhcmQ+ICAgICAKICAgICAgICAgICAgICAgCiAgICAgIDwvdi10YWItaXRlbT4KICAgIDwvdi10YWJzLWl0ZW1zPgogICAgIAogICAgIDx2LXJvdyBjbGFzcz0ndGFiLWJ1dHRvbnMnPgogICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgIG1kPSI2IiBjbGFzcz0nbGVmdC1idCcgID4KICAgICAgICAgICAgIDx2LWJ0biAgQGNsaWNrPSIkcm91dGVyLmdvKC0xKSIgb3V0bGluZWQ+xLBNVMSwTkEgRVQ8L3YtYnRuPiAgCiAgICAgICAgICAgICA8di1idG4gY2xhc3M9ImJ0bi1uZXh0IiAgQGNsaWNrPSJjaGFuZ2VUYWJQcmV2KCkiIHYtaWY9JyFmaXJzdG9uZSgpJz7Gj1ZWxo9MS8SwPC92LWJ0bj4gIAogICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0idGV4dC1yaWdodCByaWdodC1idCIgY29scz0iMTIiICBtZD0iNiI+CiAgICAgICAgICAgICAgPHYtYnRuIEBjbGljaz0iYWRkQ29udHJhY3REcmFmdCgpIiBjbGFzcz0iYnRuLXNhdmUiID5ZQUREQSBTQVhMQTwvdi1idG4+IAogICAgICAgICAgICAgIDx2LWJ0biBjbGFzcz0iYnRuLW5leHQiIEBjbGljaz0iY2hhbmdlVGFiTmV4dCgpIiB2LWlmPSchbGFzdG9uZSgpJz5Ow5ZWQsaPVMSwPC92LWJ0bj4gCiAgICAgICAgICAgICAgICA8di1idG4gdHlwZT0ic3VibWl0IiAgY2xhc3M9ImJ0bi1uZXh0IiB2LXNob3c9J2xhc3RvbmUoKSc+VMaPU0TEsFEgRVQ8L3YtYnRuPiAKICAgICAgICAgICAgIDwvdi1jb2w+CiAgIDwvdi1yb3c+ICAKPC9kaXY+CiA8L3YtY29udGFpbmVyPgogICAgIDwvdi1mb3JtPgoKICAgIDxFcnJvckRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfZXJyIiAgdi1iaW5kOmVycm9yTXNnPSJlcnJvck1zZyIvPgogIDwvdi1jYXJkPgogIAogPC9kaXY+Cg=="},null]}