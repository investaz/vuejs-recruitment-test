{"remainingRequest":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\src\\views\\Createnewagreement.vue?vue&type=template&id=74395020&","dependencies":[{"path":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\src\\views\\Createnewagreement.vue","mtime":1600243773281},{"path":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\q.samaya\\Desktop\\js-framework_tut\\MIS_for_testing\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}